{"version":3,"sources":["History/History.js","Video/Video.js","App.js","serviceWorker.js","index.js"],"names":["History","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","historyList","historyToggle","_this2","react_default","a","createElement","Grid_default","container","Paper_default","elevation","style","width","margin","hidden","padding","Typography_default","variant","component","map","url","index","Chip_default","label","onClick","click","color","prop","history","List","slice","toggle","unshift","length","pop","Component","Video","changeUrl","e","currentTarget","innerText","setState","renderPlayerWrapper","className","position","paddingTop","ReactPlayer_default","controls","top","left","playing","height","bind","assertThisInitialized","spacing","item","xs","sm","lg","justify","TextField_default","id","inputRef","input","urlInput","Button_default","value","src_History_History","App","Video_Video","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sZA+DeA,cAxDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,YAAa,GACbC,eAAe,GALAT,wEA0BV,IAAAU,EAAAP,KACP,OACEQ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,WAAS,GACbJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAOK,UAAW,EAAGC,MAAO,CAACC,MAAO,MAAOC,OAAQ,QAASC,OAAQlB,KAAKI,MAAME,eAC7EE,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAACI,QAAS,SACpBX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAYY,QAAQ,KAAKC,UAAU,MAAnC,WAGCtB,KAAKI,MAAMC,YAAYkB,IAAI,SAACC,EAAKC,GAChC,OACGA,EAAQ,GAAa,KAARD,EACZhB,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAACI,QAAS,WACpBX,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CACEkB,MAAOpB,EAAKH,MAAMC,YAAYoB,GAC9BG,QAASrB,EAAKX,MAAMiC,MACpBC,MAAM,YAERtB,EAAAC,EAAAC,cAAA,YACOF,EAAAC,EAAAC,cAAA,qEApCKqB,EAAM3B,GACpC,GAAoB,MAAhB2B,EAAKC,QAAiB,CACxB,IAAIrC,EAAUoC,EAAKC,QACjBC,EAAO7B,EAAMC,YAAY6B,QACzBC,GAAS,EAQX,OAPAF,EAAKG,QAAQzC,GACTsC,EAAKI,OAAS,GAChBJ,EAAKK,MAEHlC,EAAMC,YAAYgC,OAAS,IAC7BF,GAAS,GAEH,CAAC9B,YAAa4B,EAAM3B,cAAe6B,WAtB3BI,aCCDC,cACnB,SAAAA,EAAY5C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,IACjB3C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAArC,KAAAH,KAAMJ,KAQR6C,UAAY,SAACC,GACP7C,EAAKO,MAAMoB,MAAQkB,EAAEC,cAAcC,WACrC/C,EAAKgD,SAAS,CAACrB,IAAKkB,EAAEC,cAAcC,aAXrB/C,EAenBiD,oBAAsB,WACpB,GAAsB,IAAlBjD,EAAKO,MAAMoB,IACb,OAAQhB,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,iBAAiBhC,MAAO,CAACiC,SAAU,WAAYC,WAAY,WAC9EzC,EAAAC,EAAAC,cAACwC,EAAAzC,EAAD,CAAae,IAAK3B,EAAKO,MAAMoB,IAAK2B,UAAU,EAC/BpC,MAAO,CAACE,OAAQ,OAAQ+B,SAAU,WAAYI,IAAK,IAAKC,KAAM,KAAMC,SAAO,EAACtC,MAAM,OAClFuC,OAAO,WAjB1B1D,EAAKO,MAAQ,CACXoB,IAAK,IAEP3B,EAAK4C,UAAY5C,EAAK4C,UAAUe,KAAf1D,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAD,KANAA,wEA0BV,IAAAU,EAAAP,KACAwB,EAAOxB,KAAKI,MAAZoB,IAEP,OACEhB,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAACI,QAAS,SACpBX,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,WAAS,EAAC8C,QAAS,IACvBlD,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMkD,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC7BtD,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,WAAS,EAAC8C,QAAS,GAAIK,QAAQ,UACnCvD,EAAAC,EAAAC,cAACsD,EAAAvD,EAAD,CACEwD,GAAG,eACHtC,MAAM,kBACNuC,SAAU,SAAAC,GACR5D,EAAK6D,SAAWD,GAElB9C,QAAQ,WACRN,MAAO,CAACC,MAAO,SAEjBR,EAAAC,EAAAC,cAAC2D,EAAA5D,EAAD,CAAQY,QAAQ,YAAYS,MAAM,UAAUF,QAAS,kBAAMrB,EAAKsC,SAAS,CAACrB,IAAKjB,EAAK6D,SAASE,UAA7F,QAMJ9D,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMkD,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC5B9D,KAAK8C,uBAERtC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMkD,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC7BtD,EAAAC,EAAAC,cAAC6D,EAAD,CAASvC,QAASR,EAAKK,MAAO7B,KAAKyC,UAAUe,KAAKxD,kBAtD3BuC,aCOpBiC,mLARX,OACEhE,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,OACbvC,EAAAC,EAAAC,cAAC+D,EAAD,cAJUlC,aCQEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5c044d4f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nclass History extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      historyList: [],\n      historyToggle: true\n    }\n  }\n\n  static getDerivedStateFromProps(prop, state) {\n    if (prop.history != null) {\n      let History = prop.history,\n        List = state.historyList.slice(),\n        toggle = true;\n      List.unshift(History);\n      if (List.length > 4) {\n        List.pop();\n      }\n      if (state.historyList.length > 1) {\n        toggle = false;\n      }\n      return ({historyList: List, historyToggle: toggle})\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Grid container>\n          <Paper elevation={5} style={{width: '80%', margin: 'auto'}} hidden={this.state.historyToggle}>\n            <div style={{padding: '1rem'}}>\n              <Typography variant=\"h5\" component=\"h3\">\n                History\n              </Typography>\n              {this.state.historyList.map((url, index) => {\n                return (\n                  (index > 0 && url !== '') ?\n                    <div style={{padding: '0.5rem'}}>\n                      <Chip\n                        label={this.state.historyList[index]}\n                        onClick={this.props.click}\n                        color=\"primary\"\n                      />\n                      <br/>\n                    </div> : <div></div>\n                )\n              })}\n            </div>\n          </Paper>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default History;","import React, {Component} from 'react';\nimport ReactPlayer from 'react-player';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport History from '../History/History';\n\nexport default class Video extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      url: ''\n    }\n    this.changeUrl = this.changeUrl.bind(this);\n  }\n\n  changeUrl = (e) => {\n    if (this.state.url !== e.currentTarget.innerText) {\n      this.setState({url: e.currentTarget.innerText})\n    }\n  }\n\n  renderPlayerWrapper = () => {\n    if (this.state.url != '') {\n      return (<div className='player-wrapper' style={{position: 'relative', paddingTop: '56.25%'}}>\n          <ReactPlayer url={this.state.url} controls={true}\n                       style={{margin: 'auto', position: 'absolute', top: '0', left: '0'}} playing width='100%'\n                       height='100%'/>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const {url} = this.state;\n\n    return (\n      <div style={{padding: '5rem'}}>\n        <Grid container spacing={40}>\n          <Grid item xs={12} sm={12} lg={12}>\n            <Grid container spacing={24} justify=\"center\">\n              <TextField\n                id=\"video-search\"\n                label=\"Enter Video URL\"\n                inputRef={input => {\n                  this.urlInput = input\n                }}\n                variant=\"outlined\"\n                style={{width: '60%'}}\n              />\n              <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({url: this.urlInput.value})}>\n                Go\n              </Button>\n\n            </Grid>\n          </Grid>\n          <Grid item xs={12} sm={12} lg={12}>\n            {this.renderPlayerWrapper()}\n          </Grid>\n          <Grid item xs={12} sm={12} lg={12}>\n            <History history={url} click={this.changeUrl.bind(this)}/>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Video from './Video/Video';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Video/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}